# Designing Seamless Interconnected dApps with Gno
BUIDL Eu, 9 Jan 2025, Lisbon
Tags: golang, gnolang  
Summary: TODO

Manfred Touron  
VP Eng., Gno.land  
https://gno.land/  
https://github.com/gnolang  
@moul  

## Introduction

- Decentralized applications are the future of Web3.
- **Challenges:** Lack of modularity, limited interoperability, and siloed ecosystems.
- **Goal:** Showcase Gno’s unique capabilities for building next-gen interconnected dApps.

## What is Gno?

- **Gno**: Deterministic, transactional, auto-persistent Go interpreter.
- **Gno.land**: Blockchain designed for modular, interoperable dApps.
- **Key Features**:
  - Composable DAOs
  - Safe Objects and Pausable Closures
  - Hub for Gno ecosystem

## Key Features Overview

- **Safe Objects**:
  - Gno objects act like mini-dApps with secure boundaries.
  - Factory contracts can create independent objects accessible to other contracts.

## Full Type Safety

- Highlights how Gno avoids Solidity’s pitfalls (e.g., unsafe casting, complicated Yul interactions).
- Contracts are imported directly, exposing clean interfaces like GRC20.
- Eliminates casting addresses to contracts for safer development.

## Following Go Design Principles

- Gno tooling simplifies development with built-in optimizations (-cover, -profile, -metrics).
- All-in-one development using gnodev, avoiding reliance on third-party frameworks like Hardhat or Foundry.
- Debugger support, with plans to debug transaction execution.

## Unique Exploration with gnoweb

- Blockchain provides discovery features (e.g., Hall of Fame) instead of company-specific marketing.
- Package paths offer a new way to explore the ecosystem.

## Writing Go (Gno) Only

- No need to learn JS/TS for frontend development.
- Streamlined dApp development fully in Gno.

## Built-in Coins vs. GRC20

- Offers built-in coin mechanisms as an alternative to token standards.
- Simplifies use cases requiring native token functionalities.

## gno hello world

.code ./code/hello_world.gno

## Pausable Closures

- Transactions can pause and resume seamlessly.
- Preserve state and ownership for asynchronous execution.

## counter.gno - persistency and Render()

.code ./code/counter.gno

## counter.gno - private helpers

.code ./code/counter_2.gno

## Advanced Use Cases

- **Composable DAOs**:
  - Flexible, collaborative governance systems.
  - Example: Multi-layered decision-making via interconnected smart contracts.
  - DAO pointers for automatic proposal execution.
- **Connected Applications**:
  - Enable cross-dApp interactions with shared functionality.

## alice.gno, bob.gno

.code ./code/interop.gno

.code ./code/interop2.gno

## Gas Fee Rewards for Developers

- Usage of packages can allocate part of gas fees to deployers.
- Incentivizes creation and maintenance of reusable components.

## Technical Design

- Gno emphasizes modularity, allowing reusable contract components.
- Interoperability supports seamless interactions between dApps.

## Why Gno?

The **GnoVM** enables:  
**Seamless interoperability** of  
**untrusted** user programs  
written in a secure language.

## grc20/types.gno

Implement a GRC20 token standard, similar to ERC20 in Solidity.

.code ./code/grc20_type.gno

## Road Ahead

- Launching soon as an experimental chain.
- Opportunities for developers to contribute and innovate.

## Conclusion

- Gno is designed for the next generation of modular, interoperable dApps.
- Join the community and start building today!

## Resources

- Documentation: https://docs.gno.land  
- GitHub: https://github.com/gnolang  
- Discord: [Invite Link]

## Questions?

Thank you!