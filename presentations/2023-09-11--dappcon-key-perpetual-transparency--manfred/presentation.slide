# Gno.land: The Key To Perpetual Transparency
11 Sep 2023
Tags: gnolang, gnoland, gno, gnosdk, cosmos, proof-of-contribution, consensus, tendermint, bft, smart contract, blockchain
Summary: TODO

Manfred Touron
VP Eng., Gno.land
https://gno.land/
https://github.com/gnolang
@moul

## Intro to Gno: a new era in smart sontracting, and open-source

- Gno: Comprehensive smart contract suite: Gno.land (chain) + Gnolang (language).
- Created by Cosmos co-founder Jae Kwon.
- Gno.land: The first L1 using Gnolang, a Go-based language for smart contracts.
- Built on Tendermint2, Cosmos/IBC, secured by Proof of Contribution.
- Prioritizes simplicity, security, and scalability.
- Gnoweb: Integrated dApp server for contract interactions, no extra servers needed.

.code ./code/gnoland-schema.txt

## Gnolang, a multi-user programming language

- Gnolang: Go-based language for smart contracting.
- Powers Gno.land and future GnoVM-based blockchains.
- Multi-user design enhances developer and app interaction.
- Creates shared virtual environment, akin to developer MMORPG.

.code ./code/deps.txt

## Multi-User programming, deep contract interactions

- Contracts: callable and importable, unifying apps and libraries.
- Breaks from GitHub/NPM (libraries) or Ethereum/AWS (apps) norms.
- Imported contracts offer type safety, rich types.
- Dependencies maintain state; changes during interaction are applied.
- Enables cheap, efficient interactions with concise code.

.code ./code/deep-contract-interactions.go

## Multi-user programming: transparency, readability, audibility

- GnoVM uses human-readable paths for contracts, unlike EVM's hashes.
- No bytecodes, just plain, readable source code.
- Promotes simplicity, removes ambiguity for users and developers.
- Enhances contract discovery, reading, and auditing.

.code ./code/source-bytecode.txt

## Gno.land: GitHub for smart contracts

- Gno.land encourages reusing, importing, forking, and composing contracts.
- Provides source code, execution, metadata, and metrics (including deps/libraries).
- Metrics act as trust indicators, akin to GitHub stars or forks or NPM downloads.
- Developers can inspect contract creators (user or organization), similar to GitHub.
- Enables dependency monitoring, boosting transparency and trust.
- More than a platform, Gno.land is a developer community.

## Gno.land: simplifying smart contract development

- Remember the arrival of GitHub? Open-source existed, but it wasn't simple or social.
- It replaced the tedious process of finding and compiling tarballs with easy browsing and discovery.
- Gno.land aims to do the same for smart contracts.
- It's not just about executing contracts, but also about reusing, importing, forking, and composing them.
- Gno.land: Making smart contract development easier and more accessible.

## Gno.land: applying the GitHub effect to contract execution

- Merging GitHub's source code management with contract execution.
- Key feature? Transparent, reusable, accessible contract state (data).
- Contracts on Gno.land: Source code and state combined.
- Access contract state with its source, and printf debug like it's local.

## Gno.land: proof-of-contribution, rewarding good code

- Gno.land replaces Proof of Stake with Proof of Contribution.
- Focus shifts from investment to contributions.
- Developers are encouraged to write good quality code.
- Aligns with open-source ethos of community contribution and recognition.
- Proof of Contribution benefits both the project and the developer.

## Beyond the langage, a new open-source paradigm

- Open-source is about creating new knowledge and fostering connections.
- Traditional smart contracts have been focused on isolation, existing in bubbles.
- Gno.land aims to bring the spirit of open-source to smart contracts.
- We envision a constantly growing creative world with new contracts, libraries, interconnections, and possibilities.


## Amplifying Open-Source

- Gno.land enriches, rather than challenges, open-source.
- We treasure open-source and magnify its foundation.
- Our platform integrates execution, auditability, verification, and trust.
- Given the surge of Gno contracts, conventional open-source might appear constrained.
- It's akin to the GitHub effect on its own ecosystem.

## Conclusion: join us in shaping the future

- Gno.land is currently in testnet.
- We're seeking early adopters, builders and tinkerers to build on Gno.

-----

## Conceptual Overview
- Prior to the emergence of GitHub, Git and open-source technology were prevalent, yet they existed in a scattered manner, requiring arduous navigational methods for developers. GitHub revolutionized this process, providing a consolidated, user-friendly platform that enhanced the experience of producing and consuming open-source software. Without platforms like GitHub, the open-source landscape would still be functional, yet substantially fragmented and less accessible.
- AWS and Ethereum offer similar promises as platforms where developers can execute their code. However, Ethereum provides users with a higher degree of trust due to its immutable contracts and the possibility of verifying source code against bytecode. Despite these benefits, it still lacks the ability to host and manage code in a unified, transparent manner. Gno.land, on the other hand, blends these features, providing a level of transparency reminiscent of Ethereum, combined with the convenience and functionality of GitHub.
- Gno.land aims to be more than a mere platform for code execution. Instead, it aspires to be a fusion of GitHub's intuitive user experience, AWS's flexibility, and Ethereum's transparency. Gno.land hosts source code and implements systems to enhance its quality, like on-chain reviews, audit pipelines, and vanity metrics. 
- Our interpreted version of Go, Gnovm, ensures that the contracts on Gno.land remain perpetually transparent. Much like GitHub's removal of the need for manual tarball downloads and checksum verifications, Gnovm allows the source code to reside directly on the chain.
- One of the key benefits of interpreted contracts like Gnovm, as compared to EVM's compiled contracts, is that they allow more precise tracking and metrics for dependencies. This provides a more focused and trustworthy experience during contract reviews.
- Envision Gno.land as an ever-evolving GitHub for smart contracts, with similar functionalities but extended to include data and dependencies. We aim to create the most trustworthy platform for both users and developers, while simultaneously promoting a culture of high-quality open-source development.
- Now, visualize Gno.land as a colossal, multi-user REPL. A place where anyone can create new packages, interact with existing ones, and everything is live. It's akin to a massively multiplayer online role-playing game (MMORPG) for developers, where the code you write enhances your own account/user experience.
- Ultimately, we are striving to transform Gno.land into a new norm for the developer community. Once widely adopted, it would make today's technology appear less secure and trustworthy in comparison.

## Relevant Resources
- Multi-user REPL concept: https://github.com/gnolang/hackerspace/issues/16
- MMORPG concept for developers: https://github.com/gnolang/hackerspace/issues/4
- Additional presentations: https://github.com/gnolang/workshops/tree/main/presentations
## TMP2

## What is Game of realms?
- ongoing competition for contributors
- experimental phase for proof of contributions
- building **Evaluation DAO**, and the new governance module
- earn $ATOM and become member on mainnet genesis

.code ./code/gor-banner.txt

## Action Items
* follow github.com/gnolang/gno
* visit gno.land
* help us create "Game of Realms"
* contribute!


