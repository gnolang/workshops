# Gno: Examples
Nebular, 13 Jul 2024, Brussels
Tags: golang, gnolang  
Summary: TODO

Manfred Touron  
VP Eng., Gno.land  
https://gno.land/  
https://github.com/gnolang  
@moul  

## Bonjour, Nebular!

.code ./code/hello.go

## What is Gno?

- gno is an interpreted, deterministic version of Go with a persistent data store
gno incorporates a select list of Go features and standard libraries from Go version 1.17
gno.land is soon to be released blockchain which uses gno as its smart contract programming language

## gno - features and limitations


Determinism guaranteed
Generics not supported (yet)
No concurrency
Built in application state persistence
Import select standard libraries and other packages and applications deployed to a VM instance
Safe execution in a sandboxed environment
https://docs.gno.land/reference/go-gno-compatibility



## Ideas

```
- **GRC20 Token**: Implement a GRC20 token standard similar to ERC20 in Solidity.
- **Atomic Swap**: Demonstrate a simple atomic swap mechanism. (https://github.com/gnolang/gno/pull/2510)

- advanced example of composition
- top DAO with two sub DAOs and composing votes
- ...
- **Carmel**: Implement a system to put money behind responses, similar to a jury system with discovery and responses.
- **Name Resolution**: Create a decentralized name resolution system.
- **Whitelisting**: Develop a whitelisting mechanism for access control.
- **Boards and Posts**: Build a forum-like system with boards and posts.
- **Memeland**: Create a social platform for sharing memes.
- **Decentralized Exchange (DEX)**: Implement a simple decentralized exchange.
- **Remote Appliance Control**: Enable remote control of an appliance.
- **Game Character Movement**: Program a game character with customizable movement.
- **Social Account Recovery**: Develop a system for social account recovery.
- **Full Node Registry**: Create a registry for full nodes with a payment system.
- **Micropayment Channels**: Implement micropayment channels for small transactions.
- **Programmable Datastore**: Develop a realm that stores simple data with programmable attributes, similar to a programmable Firebase.
- **Passwordless Authentication**: Create a personal CA system for passwordless authentication using private keys and pubkeys of devices on-chain.
```

## gno hello world

.code ./code/hello_world.gno

## counter.gno - persistency and Render()

.code ./code/counter.gno

## counter.gno - private helpers

.code ./code/counter_2.gno

## gno guest book

.code ./code/guest_book.gno

## import "std"

.code ./code/gno-doc-std.txt

## users.gno - register

.code ./code/users.gno

## users.gno - admin invite

.code ./code/users_invite.gno

## tamagotchi.gno - struct

.code ./code/tamagotchi.gno

## tamagotchi.gno - render

.code ./code/tamagotchi_render.gno

## atomicswap.gno

.code ./code/atomicswap.gno

## composability.gno

.code ./code/composability.gno

## wugnot.gno

.code ./code/wugnot.gno

## grc20factory.gno

.code ./code/grc20factory.gno

## grc20registry

.code ./code/grc20registry.gno

## minidex - PlaceOrder

.code ./code/minidex.gno

## minidex - MatchOrders

.code ./code/minidex_2.gno

## dao.gno

.code ./code/dao.gno

## grc20/types.gno

Implement a GRC20 token standard similar to ERC20 in Solidity.

.code ./code/grc20_type.gno

## foo20.gno

.code ./code/foo20.gno

## bar20.gno

.code ./code/bar20.gno

## Blog Post

## Blog - Comment

## Boards Post

.code ./code/board_post.gno

## Board - comment

.code ./code/board_comment.gno

## Blog - Post

.code ./code/blog_post.gno

## Blog - Admin

.code ./code/blog_admin.gno

## user/home
